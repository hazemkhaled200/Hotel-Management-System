package hellofx.reciptionfx;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import Room.Room;
import Room.Builder.DoubleRoom;
import Room.Builder.SingleRoom;
import Room.Builder.TripleRoom;
import Worker.Reciptionist;
import hellofx.DatabaseConnection;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextField;
import javafx.scene.control.Toggle;
import javafx.scene.control.ToggleGroup;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

public class ReciptionController {

    DatabaseConnection connectNow = DatabaseConnection.getObject();
    Connection connectDB = connectNow.getConnection();
    
    /****************************************************************** */
    /* ****************** Main Panel Logout *************************** */
    /****************************************************************** */
    
    @FXML
    private Button mainlogout;
    @FXML
    private Button maincancel;

    public void mainlogoutOnAction(ActionEvent event) throws IOException{

        Node source = (Node) event.getSource();
        Stage stage = (Stage) source.getScene().getWindow();

        // Now you can set the new scene on the stage
        Scene scene = new Scene(FXMLLoader.load(getClass().getResource("../login.fxml")));
        stage.setScene(scene);
        stage.show();
    }

    public void maincancelOnAction(ActionEvent event){
        Stage stage = (Stage) maincancel.getScene().getWindow();
        stage.close();
    }

    /****************************************************************** */
    /****************************************************************** */


    /****************************************************************** */
    /* ******************* Add new Resident *************************** */
    /****************************************************************** */
    @FXML
    private Button mainAdd;

    public void mainAddOnOption(ActionEvent event) throws IOException{

        Node source = (Node) event.getSource();
        Stage stage = (Stage) source.getScene().getWindow();

        // Now you can set the new scene on the stage
        Scene scene = new Scene(FXMLLoader.load(getClass().getResource("ReciptionAdd.fxml")));
        stage.setScene(scene);
        stage.show();

    }

    @FXML
    private Button newResClearButton;
    @FXML
    private TextField newResConttxt;
    @FXML
    private TextField newResNametxt;
    @FXML
    private TextField newResstaytxt;
    @FXML
    private TextField newResServicetxt;
    @FXML
    private Label msg;

    public void newResClearButtonOnAction(ActionEvent event){

        newResNametxt.setText("");
        newResConttxt.setText("");
        newResstaytxt.setText("");
        newResServicetxt.setText("");
        msg.setText("");
        

    }

    @FXML
    private Button newResAddBtn;
    
    @FXML
    private ToggleGroup type;
    @FXML
    private ToggleGroup board;

    public void newResAddBtnOnAction(ActionEvent event) throws IOException{

        String sql = "INSERT INTO residents (r_name, r_contact, duration, service, room_type, boarding) VALUES (?, ?, ?, ?, ?, ?)";

        try (PreparedStatement pst = connectDB.prepareStatement(sql)) {
            
            pst.setString(1, newResNametxt.getText());
            pst.setString(2, newResConttxt.getText());
            pst.setString(3, newResstaytxt.getText());
            pst.setString(4, newResServicetxt.getText());
            
            String selectedRadio = "";
            for (Toggle toggle : type.getToggles()) {
                if (toggle.isSelected()) {
                    RadioButton radioButton = (RadioButton) toggle;
                    selectedRadio = radioButton.getText();
                }
            }
            pst.setString(5, selectedRadio);

            String selectedRadioboard = "";
            for (Toggle toggle : board.getToggles()) {
                if (toggle.isSelected()) {
                    RadioButton radioButton = (RadioButton) toggle;
                    selectedRadioboard = radioButton.getText();
                }
            }
            pst.setString(6, selectedRadioboard);
            
            if(pst.executeUpdate() == 1){

                PreparedStatement pst2 = connectDB.prepareStatement("SELECT r_id FROM residents WHERE r_name = ?");
                pst2.setString(1, newResNametxt.getText());
                ResultSet rs = pst2.executeQuery();
                if(rs.next()){
                    msg.setText("Data inserted successfully, ID = " + rs.getString("r_id"));
                    msg.setTextFill(Color.GREEN);
                } 
            }
            else{
                msg.setText("Something went wrong!");
                msg.setTextFill(Color.RED);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            e.getCause();
        }

    }

    


    /****************************************************************** */
    /****************************************************************** */

    /****************************************************************** */
    /* ********************** edit Resident *************************** */
    /****************************************************************** */

    @FXML
    private Button mainEdit;

    public void mainEditOnAction(ActionEvent event) throws IOException{

        Node source = (Node) event.getSource();
        Stage stage = (Stage) source.getScene().getWindow();

        // Now you can set the new scene on the stage
        Scene scene = new Scene(FXMLLoader.load(getClass().getResource("ReciptionEdit.fxml")));
        stage.setScene(scene);
        stage.show();

    }


    @FXML
    private TextField editResIdtxt;
    @FXML
    private TextField editResNametxt;
    @FXML
    private TextField editResConttxt;
    @FXML
    private TextField editResDurtxt;
    @FXML
    private TextField editResSertxt;
    @FXML 
    private Button editResSearchBtn;
    @FXML 
    private Button editResEditBtn;
    @FXML 
    private Button editResDeleteBtn;
    @FXML 
    private Button editResClearBtn;
    @FXML
    private Label msg2;
    @FXML
    private ToggleGroup roomType;
    @FXML
    private ToggleGroup boarding;
    @FXML
    private RadioButton srb;
    @FXML
    private RadioButton drb;
    @FXML
    private RadioButton trb;
    @FXML
    private RadioButton fbrb;
    @FXML
    private RadioButton hbrb;
    @FXML
    private RadioButton bbrb;
    @FXML
    private Label lll;

    public void editResClearBtnOnAction(ActionEvent event){
        editResIdtxt.setText("");
        editResNametxt.setText("");
        editResConttxt.setText("");
        editResDurtxt.setText("");
        editResSertxt.setText("");
        msg2.setText("");
    }

    public void editResSearchBtnOnAction(ActionEvent event){
        msg2.setText("");
        if((editResIdtxt.getText().isBlank() == false)){

            String getTitle = "SELECT * FROM residents WHERE r_id = '" + editResIdtxt.getText() + "'";
            try (PreparedStatement pst = connectDB.prepareStatement(getTitle)) {
                
                ResultSet rs = pst.executeQuery();

                if(rs.next() == true){

                    editResNametxt.setText(rs.getString("r_name"));
                    editResConttxt.setText(rs.getString("r_contact"));
                    editResDurtxt.setText(rs.getString("duration"));
                    editResSertxt.setText(rs.getString("service"));
                    String type = rs.getString("room_type");
                    String board = rs.getString("boarding");

                    switch (type) {
                        case "Single":
                            roomType.selectToggle(srb);
                            break;
                        case "Double":
                            roomType.selectToggle(drb);
                            break;
                        case "Triple":
                            roomType.selectToggle(trb);
                            break;
                    }

                    switch (board) {
                        case "Full Board":
                            boarding.selectToggle(fbrb);
                            break;
                        case "Half Board":
                            boarding.selectToggle(hbrb);
                            break;
                        case "Bed And Breakfast":
                            boarding.selectToggle(bbrb);
                            break;
                    }

                }
                else{
                    msg2.setText("Invalid ID");
                    msg2.setTextFill(Color.RED);
                }

            } 
            catch (SQLException e) {
                e.printStackTrace();
                e.getCause();
            }
        }
        else{
            msg2.setText("Please enter the ID");
            msg2.setTextFill(Color.RED);
        }
    }

    public void editResDeleteBtnOnAction(ActionEvent event){

        String sql = "DELETE FROM residents WHERE r_id = ?";

        try (PreparedStatement pst = connectDB.prepareStatement(sql)) {

            pst.setInt(1, Integer.parseInt(editResIdtxt.getText()));

            int rowsDeleted = pst.executeUpdate();

            if (rowsDeleted > 0) {
                msg2.setText("Account deleted successfully");
                msg2.setTextFill(Color.GREEN);

                editResIdtxt.setText("");
                editResNametxt.setText("");
                editResConttxt.setText("");
                editResDurtxt.setText("");
                editResSertxt.setText("");
            } 
            else {
                msg2.setText("Invalid ID");
                msg2.setTextFill(Color.RED);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception, e.g., display an error message to the user
        }
    }

    public void editResEditBtnOnAction(ActionEvent event){

        //"INSERT INTO residents (r_name, r_contact, duration, service, room_type, boarding) VALUES (?, ?, ?, ?, ?, ?)"
        String sql = "UPDATE residents SET r_name = ?, r_contact = ?, duration = ?, service = ?, room_type = ?, boarding = ? WHERE r_id = ?";

        try (PreparedStatement pst = connectDB.prepareStatement(sql)) {

            
            pst.setString(1, editResNametxt.getText());
            pst.setString(2, editResConttxt.getText());
            pst.setString(3, editResDurtxt.getText());
            pst.setString(4, editResSertxt.getText());

            String selectedRadio = "";
            for (Toggle toggle : roomType.getToggles()) {
                if (toggle.isSelected()) {
                    RadioButton radioButton = (RadioButton) toggle;
                    selectedRadio = radioButton.getText();
                }
            }
            pst.setString(5, selectedRadio);

            String selectedRadio2 = "";
            for (Toggle toggle : boarding.getToggles()) {
                if (toggle.isSelected()) {
                    RadioButton radioButton = (RadioButton) toggle;
                    selectedRadio2 = radioButton.getText();
                }
            }
            pst.setString(6, selectedRadio2);

            pst.setInt(7, Integer.parseInt(editResIdtxt.getText())); // Set the ID for WHERE clause

            int rowsUpdated = pst.executeUpdate();

            if (rowsUpdated > 0) {
                msg2.setText("Account edit done successfully");
                msg2.setTextFill(Color.GREEN);
            } 
            else {
                msg2.setText("Something went wrong");
                msg2.setTextFill(Color.RED);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception, e.g., display an error message to the user
        }
    }


    /****************************************************************** */
    /****************************************************************** */

    /****************************************************************** */
    /* ********************** room Resident *************************** */
    /****************************************************************** */

    @FXML
    private Button mainInfo;

    public void mainInfoOnAction(ActionEvent event) throws IOException{

        Node source = (Node) event.getSource();
        Stage stage = (Stage) source.getScene().getWindow();

        // Now you can set the new scene on the stage
        Scene scene = new Scene(FXMLLoader.load(getClass().getResource("ReciptionRoom.fxml")));
        stage.setScene(scene);
        stage.show();

    }

    /****************************************************************** */
    /****************************************************************** */

    @FXML
    private TextField resIdtxt;    
    @FXML
    private TextField roomIdtxt;    
    @FXML
    private TextField roomTypetxt;    
    @FXML
    private TextField boardingtxt;    
    @FXML
    private TextField pricetxt;    
    @FXML
    private Button getbtn;
    @FXML
    private Label msg5;

    public void getbtnOnAction(ActionEvent event){
        
        if((resIdtxt.getText().isBlank() == false)){
            
            String getTitle = "SELECT * FROM residents WHERE r_id = '" + resIdtxt.getText() + "'";
            Room room = ReturnMyRoom(getTitle);                  
                    
            String sql = "UPDATE rooms SET res_id = ?, is_available = ?, price = ?, boarding = ? WHERE room_type = ? AND is_available = ? LIMIT 1";
            updateMyRoom(sql, room);

            String setFields = "SELECT * FROM rooms WHERE res_id = '" + resIdtxt.getText() + "'";

            try (PreparedStatement pst = connectDB.prepareStatement(setFields)) {
                ResultSet rs = pst.executeQuery();
                if(rs.next() == true){
                    
                    roomIdtxt.setText(rs.getString("room_id"));
                    roomTypetxt.setText(rs.getString("room_type"));
                    boardingtxt.setText(rs.getString("boarding"));
                    pricetxt.setText(Double.toString(rs.getDouble("price")));
    
                }
                else{
                    msg5.setText("Invalid ID");
                    msg5.setTextFill(Color.RED);
                } 
            }
            catch (SQLException e) {
                e.printStackTrace();
                e.getCause();
            }


        }
        else{
            msg5.setText("Please enter the ID");
            msg5.setTextFill(Color.RED);
        }

    }

    // Room Builder and Decorator.
    public Room ReturnMyRoom(String sql){
        try (PreparedStatement pst = connectDB.prepareStatement(sql)) {
                
            ResultSet rs = pst.executeQuery();
            
            if(rs.next() == true){

                String roomType = rs.getString("room_type");
                String boarding = rs.getString("boarding");
                Reciptionist rec = new Reciptionist();

                switch (roomType) {
                    case "Single":
                        rec.setBuilder(new SingleRoom());
                    break;
                    case "Double":
                        rec.setBuilder(new DoubleRoom());
                    case "Triple":
                        rec.setBuilder(new TripleRoom());
                    default:
                        break;
                }

                switch (boarding) {
                    case "Full Board":
                        rec.decorateRoom(boarding);
                    break;
                    case "Half Board":
                        rec.decorateRoom(boarding);
                    break;
                    case "Bed And Breakfast":
                        rec.decorateRoom(boarding);
                    break;
                    default:
                    break;
                }

                rec.buildRoom();
                Room room = new Room();
                room = rec.roomKey();
                return room;
            }
            else{
                msg5.setText("Invalid ID");
                msg5.setTextFill(Color.RED);
                return null;
            } 
        }
        catch (SQLException e) {
            e.printStackTrace();
            e.getCause();
        }
        return null;

    }

    // Update The database.
    public void updateMyRoom(String sql, Room room){

        try (PreparedStatement stmt = connectDB.prepareStatement(sql)){
            stmt.setInt(1, Integer.parseInt(resIdtxt.getText()));
            stmt.setString(2, Boolean.toString(room.isAvailable));
            stmt.setDouble(3, room.price);
            stmt.setString(4, room.boardingOption);
            stmt.setString(5, room.roomType);
            stmt.setString(6, "True");
            
            msg5.setText("hazoooooom");
            int rowsUpdated = stmt.executeUpdate();

            if (rowsUpdated > 0) {
                msg5.setText("Welcome!");
                msg5.setTextFill(Color.GREEN);
            } 
            else {
                msg5.setText("Sorry, There are no available " + room.roomType + " room.");
                msg5.setTextFill(Color.RED);
            }
            
        } 
        catch (Exception e) {
            e.printStackTrace();
            e.getCause();
        }

    }
}
